import os

from buildbot.plugins import util, worker
from buildbot_travis import TravisConfigurator

c = BuildmasterConfig = {}
TravisConfigurator(BuildmasterConfig, locals()['basedir']).fromYaml('cfg.yml')

NUM_MARATHON_WORKERS = int(os.environ.get("NUM_MARATHON_WORKERS", 6))
NUM_LOCAL_WORKERS = int(os.environ.get("NUM_LOCAL_WORKERS", 4))

c['workers'] = [
    worker.MarathonWorker(
        'marathon' + str(i),
        marathon_url=os.environ.get("MARATHON_URL"),
        image=util.Interpolate("%(prop:DOCKER_IMAGE:-buildbot/buildbot-worker)s"),
        marathon_extra_config={
            "cpus": util.Interpolate("%(prop:CPU_REQUIREMENTS:-1)s"),
            "mem": util.Interpolate("%(prop:MEM_REQUIREMENTS:-1)s"),
        },
        max_builds=1,
        build_wait_timer=15)
    for i in xrange(NUM_MARATHON_WORKERS)
] + [
    # add 4 local workers
    worker.LocalWorker(
        'local' + str(i))
    for i in xrange(4)
]

if 'BUILDBOT_MQ_URL' in os.environ:
    c['mq'] = {
        'type': 'wamp',
        'router_url': os.environ['BUILDBOT_MQ_URL'],
        'realm': os.environ.get('BUILDBOT_MQ_REALM', 'buildbot').decode('utf-8')
    }

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url': os.environ.get("BUILDBOT_DB_URL", "sqlite:///state.sqlite").format(**os.environ),
}

c['buildbotNetUsageData'] = None
