import os

import requests

from buildbot.plugins import util, worker
from buildbot.process.properties import Properties
from buildbot.worker.marathon import MarathonLatentWorker
from buildbot_travis import TravisConfigurator, configurator
from buildbot_travis.steps.spawner import TravisTrigger
from buildbot_travis.travisyml import parse_env_string


class myTravisTrigger(TravisTrigger):
    def getSchedulersAndProperties(self):
        sch = self.schedulerNames[0]
        triggered_schedulers = []
        global_env_strings = self.config.config.get('env', {}).get('global',
                                                                   {})
        global_env = {}
        for env_string in global_env_strings:
            global_env.update(parse_env_string(env_string))
        reason_excluded_env = global_env.keys()
        reason_excluded_env.append('ART_OUTPUT_URL')
        ART_OUTPUT_URL = "{}/{}/{}/{}/".format(
            os.environ.get('ART_OUTPUT_URL', 'http://xxx'),
            global_env.get('artifactory_repository', 'gdp'),
            self.getProperty("buildername"), self.getProperty("buildnumber"))
        self.addURL("Artifactory URL", ART_OUTPUT_URL)
        for env in self.config.matrix:
            props_to_set = Properties()
            props_to_set.setProperty("TRAVIS_PULL_REQUEST",
                                     self.getProperty("TRAVIS_PULL_REQUEST"),
                                     "inherit")
            flat_env = {}
            props_to_set.setProperty('ART_OUTPUT_URL', ART_OUTPUT_URL, 'Trigger')
            for k, v in env.items():
                if k == "env":
                    props_to_set.update(v, ".travis.yml")
                    flat_env.update(v)
                else:
                    props_to_set.setProperty(k, v, ".travis.yml")
                    flat_env[k] = v
            props_to_set.setProperty("reason", u" | ".join(
                sorted(
                    str(k) + '=' + str(v) for k, v in flat_env.items()
                    if k not in reason_excluded_env)), "spawner")

            triggered_schedulers.append((sch, props_to_set))
        return triggered_schedulers


configurator.TravisTrigger = myTravisTrigger

c = BuildmasterConfig = {}

if 'BUILDBOT_MQ_URL' in os.environ:
    c['mq'] = {
        'type': 'wamp',
        'router_url': os.environ['BUILDBOT_MQ_URL'],
        'realm':
        os.environ.get('BUILDBOT_MQ_REALM', 'buildbot').decode('utf-8')
    }

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url': os.environ.get("BUILDBOT_DB_URL",
                             "sqlite:///state.sqlite").format(**os.environ),
}
token = os.environ['GITHUB_TOKEN']
url = "https://api.github.com/orgs/{}/repos".format(
    os.environ.get('GITHUB_ORG', 'Forestscribe'))
repos = requests.get(url, headers={'Authorization': 'token ' + token}).json()


def repo_to_bbtravis(r):
    return dict(
        branches=["master"],
        name=r['name'],
        repository=r['html_url'],
        stages=[],
        tags=[],
        treeStableTimer=60,
        reporter_context="bb%(prop:TARGET:+/)s%(prop:TARGET)s",
        github_token=token,
        vcs_type="github")


bbtravis_cfg = {'projects': [repo_to_bbtravis(r) for r in repos]}

NUM_MARATHON_DYNAMIC_WORKERS = int(
    os.environ.get("NUM_MARATHON_DYNAMIC_WORKERS", 6))
NUM_LOCAL_WORKERS = int(os.environ.get("NUM_LOCAL_WORKERS", 4))

env = {}
envs_to_copy = dict(
    BUILDMASTER="BUILDMASTER_LB_HOST",
    BUILDMASTER_PORT="BUILDMASTER_LB_PORT",
    http_proxy="http_proxy",
    https_proxy="https_proxy",
    no_proxy="no_proxy",
    NO_PROXY="no_proxy",
    ALL_PROXY="ALL_PROXY", )

for worker_env, master_env in envs_to_copy.items():
    if master_env in os.environ:
        env[worker_env] = os.environ[master_env]

if "ALL_PROXY" in env:
    env['GIT_PROXY_COMMAND'] = "/usr/bin/oe-git-proxy"


class myMarathonLatentWorker(MarathonLatentWorker):
    def getContainerName(self):
        return ('%s-%s' % (self.masterhash, self.workername)).replace("_", "-")


volumes = [
    {
        "containerPath": "/buildbot-worker",
        "hostPath": ".",
        "mode": "RW"
    }
]
use_persitent_volumes = False
extra_config = {
    "cpus":
    util.renderer(lambda x: int(x.getProperty("CPU_REQUIREMENTS"))),
    "mem":
    util.renderer(lambda x: int(x.getProperty("MEM_REQUIREMENTS"))),
    "env": env,
    "container": {
        "docker": {
            "forcePullImage": True,
        },
        "volumes": volumes
    }
}
if use_persitent_volumes:
    volumes.insert(0, {
        "containerPath": "buildbot-data",
        "mode": "RW",
        "persistent": {
            "type": "root",
            "size": 300000
        }
    })
    volumes[-1]['hostPath'] = "buildbot-data"
    extra_config = extra_config.update({
        "residency": {
            "taskLostBehavior": "WAIT_FOREVER"
        },
        "upgradeStrategy": {
            "minimumHealthCapacity": 0.5,
            "maximumOverCapacity": 0
        }
    })
c['workers'] = [
    myMarathonLatentWorker(
        'mesosworker%03d' % (i, ),
        marathon_app_prefix="",
        marathon_url=os.environ.get("MARATHON_URL", 'http://marathon'),
        image=util.Interpolate(
            "%(prop:DOCKER_IMAGE:-buildbot/buildbot-worker)s"),
        marathon_extra_config=extra_config,
        max_builds=1,
        build_wait_timeout=150000)
    for i in xrange(NUM_MARATHON_DYNAMIC_WORKERS)
] + [
    # add 4 local workers
    worker.LocalWorker('local' + str(i)) for i in xrange(NUM_LOCAL_WORKERS)
]

c['buildbotNetUsageData'] = None
os.environ['PORT'] = os.environ.get('BUILDBOT_WEB_PORT', '8010')
TravisConfigurator(BuildmasterConfig,
                   locals()['basedir']).fromDict(bbtravis_cfg)
c['buildbotURL'] = os.environ.get(
    "BUILDBOT_WEB_URL", "http://localhost:8010/").format(**os.environ)
