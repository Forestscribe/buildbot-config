import os

import requests

from buildbot.plugins import util, worker
from buildbot.worker.marathon import MarathonLatentWorker
from buildbot_travis import TravisConfigurator

c = BuildmasterConfig = {}

if 'BUILDBOT_MQ_URL' in os.environ:
    c['mq'] = {
        'type': 'wamp',
        'router_url': os.environ['BUILDBOT_MQ_URL'],
        'realm': os.environ.get('BUILDBOT_MQ_REALM', 'buildbot').decode('utf-8')
    }

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url': os.environ.get("BUILDBOT_DB_URL", "sqlite:///state.sqlite").format(**os.environ),
}
token = os.environ['GITHUB_TOKEN']
repos = requests.get("https://api.github.com/orgs/{}/repos".format(
    os.environ.get('GITHUB_ORG', 'Forestscribe')), headers={
        'Authorization': 'token ' + token}).json()


def repo_to_bbtravis(r):
    return dict(
        branches=["master"],
        name=r['name'],
        repository=r['html_url'],
        stages=[],
        tags=[],
        reporter_context="bb",
        github_token=token,
        vcs_type="github")


bbtravis_cfg = {'projects': [repo_to_bbtravis(r) for r in repos]}

NUM_MARATHON_WORKERS = int(os.environ.get("NUM_MARATHON_WORKERS", 6))
NUM_LOCAL_WORKERS = int(os.environ.get("NUM_LOCAL_WORKERS", 4))

c['workers'] = [
    MarathonLatentWorker(
        'marathon' + str(i),
        marathon_url=os.environ.get("MARATHON_URL", 'http://marathon'),
        image=util.Interpolate("%(prop:DOCKER_IMAGE:-buildbot/buildbot-worker)s"),
        marathon_extra_config={
            "cpus": util.renderer(lambda x: int(x.getProperty("CPU_REQUIREMENTS"))),
            "mem": util.renderer(lambda x: int(x.getProperty("MEM_REQUIREMENTS"))),
            "env": {
                "BUILDMASTER": os.environ.get("BUILDMASTER_LB_HOST"),
                "BUILDMASTER_PORT": os.environ.get("BUILDMASTER_LB_PORT"),
            }
        },
        max_builds=1,
        build_wait_timeout=15)
    for i in xrange(NUM_MARATHON_WORKERS)
] + [
    # add 4 local workers
    worker.LocalWorker(
        'local' + str(i))
    for i in xrange(4)
]

c['buildbotNetUsageData'] = None
os.environ['PORT'] = os.environ.get('BUILDBOT_WEB_PORT', '8010')
TravisConfigurator(BuildmasterConfig, locals()['basedir']).fromDict(bbtravis_cfg)
c['buildbotURL'] = os.environ.get("BUILDBOT_WEB_URL", "http://localhost:8010/").format(**os.environ)
